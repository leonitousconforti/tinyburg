/**
 * This script is automatically ran by heft during before typescript
 * transpilation and will regenerate the data files in this directory.
 */

const path = require("node:path");
const fs = require("node:fs/promises");
const debug = require("debug")("tinyburg:core:update-common-data");

// Banner to put at the top of every data file
const sourceCodeBanner = `/**
 * This file was auto-generated by a frida agent
 *
 * Generated by:
 * __filename
 *
 * with TinyTower version: __version
 *
 * on: __date
 */
`;

async function main() {
    const { architect } = await import("@tinyburg/architect");
    const { loadApkFromApkpure } = await import("@tinyburg/apks");
    const { bootstrapAgentOnRemote, GetterAgents } = await import("@tinyburg/insight");

    // Create a container to extract information from
    const apk = await loadApkFromApkpure("4.23.0");
    const { fridaAddress, installApk, emulatorContainer } = await architect();
    await installApk(apk);

    // To know where to put the generated source code
    const AgentOutputFileMap = {
        "./bitbook-posts.ts": GetterAgents.BitbookAgent,
        "./bitizen.ts": GetterAgents.BitizenAgent,
        "./costumes.ts": GetterAgents.CostumeAgent,
        "./elevators.ts": GetterAgents.ElevatorAgent,
        "./floors.ts": GetterAgents.FloorAgent,
        "./missions.ts": GetterAgents.MissionAgent,
        "./pets.ts": GetterAgents.PetAgent,
        "./roofs.ts": GetterAgents.RoofAgent,
    };

    for (const [outputDestination, agent] of Object.entries(AgentOutputFileMap)) {
        console.log(`* Running agent: ${agent.agentFile}`);
        const { runAgentMain } = await bootstrapAgentOnRemote(agent, fridaAddress);

        const result = await runAgentMain();
        const version = result.match(/TinyTower version: ([\d.]+)/gm)?.[0];
        const cleanedSource = result.replaceAll(/\/\/ TinyTower version: ([\d.]+)/gm, "");

        const formattedBanner = sourceCodeBanner
            .replace("__filename", agent.agentFile)
            .replace("__date", new Date().toUTCString())
            .replace("__version", version?.split(":")[1]?.trim() || "unknown");

        const outputPath = path.join(__dirname, outputDestination);
        await fs.writeFile(outputPath, formattedBanner + cleanedSource);
        console.log(`* Done running agent: ${agent}`);
        console.log("---------------------------");
    }

    await emulatorContainer.stop();
    await emulatorContainer.remove();
}

main().catch((error) => console.error(error));
module.exports = {};
